/*eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ClientMsgDto', null, global);
goog.exportSymbol('proto.ControlAnimateDto', null, global);
goog.exportSymbol('proto.ControlDto', null, global);
goog.exportSymbol('proto.ControlGaitDto', null, global);
goog.exportSymbol('proto.EntityDto', null, global);
goog.exportSymbol('proto.EntityStatusListDto', null, global);
goog.exportSymbol('proto.ErrorDto', null, global);
goog.exportSymbol('proto.ErrorDto.ErrorCode', null, global);
goog.exportSymbol('proto.ServerMsgDto', null, global);
goog.exportSymbol('proto.YoureDto', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EntityDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EntityDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EntityDto.displayName = 'proto.EntityDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EntityDto.prototype.toObject = function(opt_includeInstance) {
  return proto.EntityDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EntityDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EntityDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    posX: +jspb.Message.getField(msg, 1),
    posY: +jspb.Message.getField(msg, 2),
    posZ: +jspb.Message.getField(msg, 3),
    gid: jspb.Message.getField(msg, 4),
    collisionRadius: +jspb.Message.getField(msg, 5),
    speed: +jspb.Message.getField(msg, 6),
    heading: +jspb.Message.getField(msg, 7),
    facing: +jspb.Message.getField(msg, 8),
    gait: +jspb.Message.getField(msg, 9),
    animationStart: jspb.Message.getField(msg, 10),
    animation: jspb.Message.getField(msg, 11),
    collisionMaskA: jspb.Message.getField(msg, 12),
    collisionMaskB: jspb.Message.getField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EntityDto}
 */
proto.EntityDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EntityDto;
  return proto.EntityDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EntityDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EntityDto}
 */
proto.EntityDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPosX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPosY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPosZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCollisionRadius(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFacing(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGait(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAnimationStart(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnimation(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCollisionMaskA(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCollisionMaskB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EntityDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EntityDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EntityDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EntityDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = jspb.Message.getField(this, 6);
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = jspb.Message.getField(this, 7);
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = jspb.Message.getField(this, 8);
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = jspb.Message.getField(this, 9);
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = jspb.Message.getField(this, 10);
  if (f != null) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = jspb.Message.getField(this, 11);
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = jspb.Message.getField(this, 12);
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = jspb.Message.getField(this, 13);
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EntityDto} The clone.
 */
proto.EntityDto.prototype.cloneMessage = function() {
  return /** @type {!proto.EntityDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required double pos_x = 1;
 * @return {number}
 */
proto.EntityDto.prototype.getPosX = function() {
  return /** @type {number} */ (!this.hasPosX() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setPosX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EntityDto.prototype.clearPosX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasPosX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required double pos_y = 2;
 * @return {number}
 */
proto.EntityDto.prototype.getPosY = function() {
  return /** @type {number} */ (!this.hasPosY() ? 0.0 : +jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setPosY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.EntityDto.prototype.clearPosY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasPosY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required double pos_z = 3;
 * @return {number}
 */
proto.EntityDto.prototype.getPosZ = function() {
  return /** @type {number} */ (!this.hasPosZ() ? 0.0 : +jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setPosZ = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.EntityDto.prototype.clearPosZ = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasPosZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint64 gid = 4;
 * @return {number}
 */
proto.EntityDto.prototype.getGid = function() {
  return /** @type {number} */ (!this.hasGid() ? 0 : jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setGid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.EntityDto.prototype.clearGid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasGid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required double collision_radius = 5;
 * @return {number}
 */
proto.EntityDto.prototype.getCollisionRadius = function() {
  return /** @type {number} */ (!this.hasCollisionRadius() ? 0.0 : +jspb.Message.getField(this, 5));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setCollisionRadius = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.EntityDto.prototype.clearCollisionRadius = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasCollisionRadius = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required double speed = 6;
 * @return {number}
 */
proto.EntityDto.prototype.getSpeed = function() {
  return /** @type {number} */ (!this.hasSpeed() ? 0.0 : +jspb.Message.getField(this, 6));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.EntityDto.prototype.clearSpeed = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required double heading = 7;
 * @return {number}
 */
proto.EntityDto.prototype.getHeading = function() {
  return /** @type {number} */ (!this.hasHeading() ? 0.0 : +jspb.Message.getField(this, 7));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setHeading = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.EntityDto.prototype.clearHeading = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required double facing = 8;
 * @return {number}
 */
proto.EntityDto.prototype.getFacing = function() {
  return /** @type {number} */ (!this.hasFacing() ? 0.0 : +jspb.Message.getField(this, 8));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setFacing = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.EntityDto.prototype.clearFacing = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasFacing = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required double gait = 9;
 * @return {number}
 */
proto.EntityDto.prototype.getGait = function() {
  return /** @type {number} */ (!this.hasGait() ? 0.0 : +jspb.Message.getField(this, 9));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setGait = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.EntityDto.prototype.clearGait = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasGait = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required int64 animation_start = 10;
 * @return {number}
 */
proto.EntityDto.prototype.getAnimationStart = function() {
  return /** @type {number} */ (!this.hasAnimationStart() ? 0 : jspb.Message.getField(this, 10));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setAnimationStart = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.EntityDto.prototype.clearAnimationStart = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasAnimationStart = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required uint32 animation = 11;
 * @return {number}
 */
proto.EntityDto.prototype.getAnimation = function() {
  return /** @type {number} */ (!this.hasAnimation() ? 0 : jspb.Message.getField(this, 11));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setAnimation = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.EntityDto.prototype.clearAnimation = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasAnimation = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required uint32 collision_mask_a = 12;
 * @return {number}
 */
proto.EntityDto.prototype.getCollisionMaskA = function() {
  return /** @type {number} */ (!this.hasCollisionMaskA() ? 0 : jspb.Message.getField(this, 12));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setCollisionMaskA = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.EntityDto.prototype.clearCollisionMaskA = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasCollisionMaskA = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required uint32 collision_mask_b = 13;
 * @return {number}
 */
proto.EntityDto.prototype.getCollisionMaskB = function() {
  return /** @type {number} */ (!this.hasCollisionMaskB() ? 0 : jspb.Message.getField(this, 13));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setCollisionMaskB = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.EntityDto.prototype.clearCollisionMaskB = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasCollisionMaskB = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EntityStatusListDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EntityStatusListDto.repeatedFields_, null);
};
goog.inherits(proto.EntityStatusListDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EntityStatusListDto.displayName = 'proto.EntityStatusListDto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EntityStatusListDto.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EntityStatusListDto.prototype.toObject = function(opt_includeInstance) {
  return proto.EntityStatusListDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EntityStatusListDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EntityStatusListDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    tick: jspb.Message.getField(msg, 1),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.EntityDto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EntityStatusListDto}
 */
proto.EntityStatusListDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EntityStatusListDto;
  return proto.EntityStatusListDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EntityStatusListDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EntityStatusListDto}
 */
proto.EntityStatusListDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTick(value);
      break;
    case 2:
      var value = new proto.EntityDto;
      reader.readMessage(value,proto.EntityDto.deserializeBinaryFromReader);
      msg.getEntitiesList().push(value);
      msg.setEntitiesList(msg.getEntitiesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EntityStatusListDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EntityStatusListDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EntityStatusListDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EntityStatusListDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.EntityDto.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EntityStatusListDto} The clone.
 */
proto.EntityStatusListDto.prototype.cloneMessage = function() {
  return /** @type {!proto.EntityStatusListDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int64 tick = 1;
 * @return {number}
 */
proto.EntityStatusListDto.prototype.getTick = function() {
  return /** @type {number} */ (!this.hasTick() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.EntityStatusListDto.prototype.setTick = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EntityStatusListDto.prototype.clearTick = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityStatusListDto.prototype.hasTick = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated EntityDto entities = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.EntityDto>}
 */
proto.EntityStatusListDto.prototype.getEntitiesList = function() {
  return /** @type{!Array.<!proto.EntityDto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EntityDto, 2));
};


/** @param {Array.<!proto.EntityDto>} value  */
proto.EntityStatusListDto.prototype.setEntitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.EntityStatusListDto.prototype.clearEntitiesList = function() {
  this.setEntitiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ErrorDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ErrorDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ErrorDto.displayName = 'proto.ErrorDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ErrorDto.prototype.toObject = function(opt_includeInstance) {
  return proto.ErrorDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ErrorDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ErrorDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ErrorDto}
 */
proto.ErrorDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ErrorDto;
  return proto.ErrorDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ErrorDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ErrorDto}
 */
proto.ErrorDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ErrorDto.ErrorCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ErrorDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ErrorDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ErrorDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ErrorDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ErrorDto} The clone.
 */
proto.ErrorDto.prototype.cloneMessage = function() {
  return /** @type {!proto.ErrorDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required ErrorCode code = 1;
 * @return {!proto.ErrorDto.ErrorCode}
 */
proto.ErrorDto.prototype.getCode = function() {
  return /** @type {!proto.ErrorDto.ErrorCode} */ (!this.hasCode() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {proto.ErrorDto.ErrorCode|undefined} value  */
proto.ErrorDto.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ErrorDto.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ErrorDto.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.ErrorDto.ErrorCode = {
  SERVER_ERROR: 0,
  TOO_MANY_CONNECTIONS: 1,
  SERVER_MAINTENANCE: 2,
  MESSAGE_TOO_LONG: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.YoureDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.YoureDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.YoureDto.displayName = 'proto.YoureDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.YoureDto.prototype.toObject = function(opt_includeInstance) {
  return proto.YoureDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.YoureDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.YoureDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    gid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.YoureDto}
 */
proto.YoureDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.YoureDto;
  return proto.YoureDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.YoureDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.YoureDto}
 */
proto.YoureDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.YoureDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.YoureDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.YoureDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.YoureDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.YoureDto} The clone.
 */
proto.YoureDto.prototype.cloneMessage = function() {
  return /** @type {!proto.YoureDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required uint64 gid = 1;
 * @return {number}
 */
proto.YoureDto.prototype.getGid = function() {
  return /** @type {number} */ (!this.hasGid() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.YoureDto.prototype.setGid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.YoureDto.prototype.clearGid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.YoureDto.prototype.hasGid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMsgDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ServerMsgDto.oneofGroups_);
};
goog.inherits(proto.ServerMsgDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServerMsgDto.displayName = 'proto.ServerMsgDto';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServerMsgDto.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.ServerMsgDto.MsgCase = {
  MSG_NOT_SET: 0,
  ERROR: 1,
  ENTITY_LIST: 2,
  YOURE: 3
};

/**
 * @return {proto.ServerMsgDto.MsgCase}
 */
proto.ServerMsgDto.prototype.getMsgCase = function() {
  return /** @type {proto.ServerMsgDto.MsgCase} */(jspb.Message.computeOneofCase(this, proto.ServerMsgDto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMsgDto.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMsgDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMsgDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ServerMsgDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.ErrorDto.toObject(includeInstance, f),
    entityList: (f = msg.getEntityList()) && proto.EntityStatusListDto.toObject(includeInstance, f),
    youre: (f = msg.getYoure()) && proto.YoureDto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMsgDto}
 */
proto.ServerMsgDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMsgDto;
  return proto.ServerMsgDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMsgDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMsgDto}
 */
proto.ServerMsgDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ErrorDto;
      reader.readMessage(value,proto.ErrorDto.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.EntityStatusListDto;
      reader.readMessage(value,proto.EntityStatusListDto.deserializeBinaryFromReader);
      msg.setEntityList(value);
      break;
    case 3:
      var value = new proto.YoureDto;
      reader.readMessage(value,proto.YoureDto.deserializeBinaryFromReader);
      msg.setYoure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ServerMsgDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ServerMsgDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMsgDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ServerMsgDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ErrorDto.serializeBinaryToWriter
    );
  }
  f = this.getEntityList();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.EntityStatusListDto.serializeBinaryToWriter
    );
  }
  f = this.getYoure();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.YoureDto.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ServerMsgDto} The clone.
 */
proto.ServerMsgDto.prototype.cloneMessage = function() {
  return /** @type {!proto.ServerMsgDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ErrorDto error = 1;
 * @return {proto.ErrorDto}
 */
proto.ServerMsgDto.prototype.getError = function() {
  return /** @type{proto.ErrorDto} */ (
    jspb.Message.getWrapperField(this, proto.ErrorDto, 1));
};


/** @param {proto.ErrorDto|undefined} value  */
proto.ServerMsgDto.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ServerMsgDto.oneofGroups_[0], value);
};


proto.ServerMsgDto.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ServerMsgDto.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EntityStatusListDto entity_list = 2;
 * @return {proto.EntityStatusListDto}
 */
proto.ServerMsgDto.prototype.getEntityList = function() {
  return /** @type{proto.EntityStatusListDto} */ (
    jspb.Message.getWrapperField(this, proto.EntityStatusListDto, 2));
};


/** @param {proto.EntityStatusListDto|undefined} value  */
proto.ServerMsgDto.prototype.setEntityList = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ServerMsgDto.oneofGroups_[0], value);
};


proto.ServerMsgDto.prototype.clearEntityList = function() {
  this.setEntityList(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ServerMsgDto.prototype.hasEntityList = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional YoureDto youre = 3;
 * @return {proto.YoureDto}
 */
proto.ServerMsgDto.prototype.getYoure = function() {
  return /** @type{proto.YoureDto} */ (
    jspb.Message.getWrapperField(this, proto.YoureDto, 3));
};


/** @param {proto.YoureDto|undefined} value  */
proto.ServerMsgDto.prototype.setYoure = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ServerMsgDto.oneofGroups_[0], value);
};


proto.ServerMsgDto.prototype.clearYoure = function() {
  this.setYoure(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ServerMsgDto.prototype.hasYoure = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ControlGaitDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ControlGaitDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ControlGaitDto.displayName = 'proto.ControlGaitDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ControlGaitDto.prototype.toObject = function(opt_includeInstance) {
  return proto.ControlGaitDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ControlGaitDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ControlGaitDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    heading: +jspb.Message.getField(msg, 1),
    facing: +jspb.Message.getField(msg, 2),
    gait: +jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ControlGaitDto}
 */
proto.ControlGaitDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ControlGaitDto;
  return proto.ControlGaitDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ControlGaitDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ControlGaitDto}
 */
proto.ControlGaitDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFacing(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGait(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ControlGaitDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ControlGaitDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ControlGaitDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ControlGaitDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ControlGaitDto} The clone.
 */
proto.ControlGaitDto.prototype.cloneMessage = function() {
  return /** @type {!proto.ControlGaitDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required double heading = 1;
 * @return {number}
 */
proto.ControlGaitDto.prototype.getHeading = function() {
  return /** @type {number} */ (!this.hasHeading() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.ControlGaitDto.prototype.setHeading = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ControlGaitDto.prototype.clearHeading = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ControlGaitDto.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required double facing = 2;
 * @return {number}
 */
proto.ControlGaitDto.prototype.getFacing = function() {
  return /** @type {number} */ (!this.hasFacing() ? 0.0 : +jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.ControlGaitDto.prototype.setFacing = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ControlGaitDto.prototype.clearFacing = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ControlGaitDto.prototype.hasFacing = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required double gait = 3;
 * @return {number}
 */
proto.ControlGaitDto.prototype.getGait = function() {
  return /** @type {number} */ (!this.hasGait() ? 0.0 : +jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.ControlGaitDto.prototype.setGait = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ControlGaitDto.prototype.clearGait = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ControlGaitDto.prototype.hasGait = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ControlAnimateDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ControlAnimateDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ControlAnimateDto.displayName = 'proto.ControlAnimateDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ControlAnimateDto.prototype.toObject = function(opt_includeInstance) {
  return proto.ControlAnimateDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ControlAnimateDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ControlAnimateDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    animation: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ControlAnimateDto}
 */
proto.ControlAnimateDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ControlAnimateDto;
  return proto.ControlAnimateDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ControlAnimateDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ControlAnimateDto}
 */
proto.ControlAnimateDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnimation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ControlAnimateDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ControlAnimateDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ControlAnimateDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ControlAnimateDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ControlAnimateDto} The clone.
 */
proto.ControlAnimateDto.prototype.cloneMessage = function() {
  return /** @type {!proto.ControlAnimateDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required uint32 animation = 1;
 * @return {number}
 */
proto.ControlAnimateDto.prototype.getAnimation = function() {
  return /** @type {number} */ (!this.hasAnimation() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.ControlAnimateDto.prototype.setAnimation = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ControlAnimateDto.prototype.clearAnimation = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ControlAnimateDto.prototype.hasAnimation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ControlDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ControlDto.oneofGroups_);
};
goog.inherits(proto.ControlDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ControlDto.displayName = 'proto.ControlDto';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ControlDto.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.ControlDto.ControlCase = {
  CONTROL_NOT_SET: 0,
  GAIT: 2,
  ANIMATE: 3
};

/**
 * @return {proto.ControlDto.ControlCase}
 */
proto.ControlDto.prototype.getControlCase = function() {
  return /** @type {proto.ControlDto.ControlCase} */(jspb.Message.computeOneofCase(this, proto.ControlDto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ControlDto.prototype.toObject = function(opt_includeInstance) {
  return proto.ControlDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ControlDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ControlDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    tick: jspb.Message.getField(msg, 1),
    gait: (f = msg.getGait()) && proto.ControlGaitDto.toObject(includeInstance, f),
    animate: (f = msg.getAnimate()) && proto.ControlAnimateDto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ControlDto}
 */
proto.ControlDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ControlDto;
  return proto.ControlDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ControlDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ControlDto}
 */
proto.ControlDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTick(value);
      break;
    case 2:
      var value = new proto.ControlGaitDto;
      reader.readMessage(value,proto.ControlGaitDto.deserializeBinaryFromReader);
      msg.setGait(value);
      break;
    case 3:
      var value = new proto.ControlAnimateDto;
      reader.readMessage(value,proto.ControlAnimateDto.deserializeBinaryFromReader);
      msg.setAnimate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ControlDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ControlDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ControlDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ControlDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getGait();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ControlGaitDto.serializeBinaryToWriter
    );
  }
  f = this.getAnimate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ControlAnimateDto.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ControlDto} The clone.
 */
proto.ControlDto.prototype.cloneMessage = function() {
  return /** @type {!proto.ControlDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int64 tick = 1;
 * @return {number}
 */
proto.ControlDto.prototype.getTick = function() {
  return /** @type {number} */ (!this.hasTick() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.ControlDto.prototype.setTick = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ControlDto.prototype.clearTick = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ControlDto.prototype.hasTick = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ControlGaitDto gait = 2;
 * @return {proto.ControlGaitDto}
 */
proto.ControlDto.prototype.getGait = function() {
  return /** @type{proto.ControlGaitDto} */ (
    jspb.Message.getWrapperField(this, proto.ControlGaitDto, 2));
};


/** @param {proto.ControlGaitDto|undefined} value  */
proto.ControlDto.prototype.setGait = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ControlDto.oneofGroups_[0], value);
};


proto.ControlDto.prototype.clearGait = function() {
  this.setGait(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ControlDto.prototype.hasGait = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ControlAnimateDto animate = 3;
 * @return {proto.ControlAnimateDto}
 */
proto.ControlDto.prototype.getAnimate = function() {
  return /** @type{proto.ControlAnimateDto} */ (
    jspb.Message.getWrapperField(this, proto.ControlAnimateDto, 3));
};


/** @param {proto.ControlAnimateDto|undefined} value  */
proto.ControlDto.prototype.setAnimate = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ControlDto.oneofGroups_[0], value);
};


proto.ControlDto.prototype.clearAnimate = function() {
  this.setAnimate(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ControlDto.prototype.hasAnimate = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientMsgDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ClientMsgDto.oneofGroups_);
};
goog.inherits(proto.ClientMsgDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientMsgDto.displayName = 'proto.ClientMsgDto';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ClientMsgDto.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.ClientMsgDto.MsgCase = {
  MSG_NOT_SET: 0,
  CONTROL: 1
};

/**
 * @return {proto.ClientMsgDto.MsgCase}
 */
proto.ClientMsgDto.prototype.getMsgCase = function() {
  return /** @type {proto.ClientMsgDto.MsgCase} */(jspb.Message.computeOneofCase(this, proto.ClientMsgDto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientMsgDto.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientMsgDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientMsgDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ClientMsgDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    control: (f = msg.getControl()) && proto.ControlDto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientMsgDto}
 */
proto.ClientMsgDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientMsgDto;
  return proto.ClientMsgDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientMsgDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientMsgDto}
 */
proto.ClientMsgDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ControlDto;
      reader.readMessage(value,proto.ControlDto.deserializeBinaryFromReader);
      msg.setControl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ClientMsgDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ClientMsgDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientMsgDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ClientMsgDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getControl();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ControlDto.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ClientMsgDto} The clone.
 */
proto.ClientMsgDto.prototype.cloneMessage = function() {
  return /** @type {!proto.ClientMsgDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ControlDto control = 1;
 * @return {proto.ControlDto}
 */
proto.ClientMsgDto.prototype.getControl = function() {
  return /** @type{proto.ControlDto} */ (
    jspb.Message.getWrapperField(this, proto.ControlDto, 1));
};


/** @param {proto.ControlDto|undefined} value  */
proto.ClientMsgDto.prototype.setControl = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ClientMsgDto.oneofGroups_[0], value);
};


proto.ClientMsgDto.prototype.clearControl = function() {
  this.setControl(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ClientMsgDto.prototype.hasControl = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto);
