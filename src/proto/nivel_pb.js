/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.entity', null, global);
goog.exportSymbol('proto.vector3', null, global);
goog.exportSymbol('proto.world', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vector3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vector3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vector3.displayName = 'proto.vector3';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vector3.prototype.toObject = function(opt_includeInstance) {
  return proto.vector3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vector3} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vector3.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getField(msg, 1),
    y: +jspb.Message.getField(msg, 2),
    z: +jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vector3}
 */
proto.vector3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vector3;
  return proto.vector3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vector3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vector3}
 */
proto.vector3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vector3} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vector3.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vector3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vector3.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.vector3} The clone.
 */
proto.vector3.prototype.cloneMessage = function() {
  return /** @type {!proto.vector3} */ (jspb.Message.cloneMessage(this));
};


/**
 * required float x = 1;
 * @return {number}
 */
proto.vector3.prototype.getX = function() {
  return /** @type {number} */ (!this.hasX() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.vector3.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.vector3.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.vector3.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float y = 2;
 * @return {number}
 */
proto.vector3.prototype.getY = function() {
  return /** @type {number} */ (!this.hasY() ? 0.0 : +jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.vector3.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.vector3.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.vector3.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float z = 3;
 * @return {number}
 */
proto.vector3.prototype.getZ = function() {
  return /** @type {number} */ (!this.hasZ() ? 0.0 : +jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.vector3.prototype.setZ = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.vector3.prototype.clearZ = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.vector3.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.entity.displayName = 'proto.entity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity} msg The msg instance to transform.
 * @return {!Object}
 */
proto.entity.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    colRad: +jspb.Message.getField(msg, 2),
    pos: (f = msg.getPos()) && proto.vector3.toObject(includeInstance, f),
    vel: (f = msg.getVel()) && proto.vector3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity}
 */
proto.entity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity;
  return proto.entity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity}
 */
proto.entity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setColRad(value);
      break;
    case 3:
      var value = new proto.vector3;
      reader.readMessage(value,proto.vector3.deserializeBinaryFromReader);
      msg.setPos(value);
      break;
    case 4:
      var value = new proto.vector3;
      reader.readMessage(value,proto.vector3.deserializeBinaryFromReader);
      msg.setVel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.entity} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.entity.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.entity.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = this.getPos();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.vector3.serializeBinaryToWriter
    );
  }
  f = this.getVel();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.vector3.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.entity} The clone.
 */
proto.entity.prototype.cloneMessage = function() {
  return /** @type {!proto.entity} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.entity.prototype.getId = function() {
  return /** @type {number} */ (!this.hasId() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.entity.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.entity.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.entity.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float col_rad = 2;
 * @return {number}
 */
proto.entity.prototype.getColRad = function() {
  return /** @type {number} */ (!this.hasColRad() ? 0.0 : +jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.entity.prototype.setColRad = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.entity.prototype.clearColRad = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.entity.prototype.hasColRad = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required vector3 pos = 3;
 * @return {!proto.vector3}
 */
proto.entity.prototype.getPos = function() {
  return /** @type{!proto.vector3} */ (
    jspb.Message.getWrapperField(this, proto.vector3, 3, 1));
};


/** @param {proto.vector3|undefined} value  */
proto.entity.prototype.setPos = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.entity.prototype.clearPos = function() {
  this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.entity.prototype.hasPos = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required vector3 vel = 4;
 * @return {!proto.vector3}
 */
proto.entity.prototype.getVel = function() {
  return /** @type{!proto.vector3} */ (
    jspb.Message.getWrapperField(this, proto.vector3, 4, 1));
};


/** @param {proto.vector3|undefined} value  */
proto.entity.prototype.setVel = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.entity.prototype.clearVel = function() {
  this.setVel(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.entity.prototype.hasVel = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.world = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.world.repeatedFields_, null);
};
goog.inherits(proto.world, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.world.displayName = 'proto.world';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.world.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.world.prototype.toObject = function(opt_includeInstance) {
  return proto.world.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.world} msg The msg instance to transform.
 * @return {!Object}
 */
proto.world.toObject = function(includeInstance, msg) {
  var f, obj = {
    entsList: jspb.Message.toObjectList(msg.getEntsList(),
    proto.entity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.world}
 */
proto.world.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.world;
  return proto.world.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.world} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.world}
 */
proto.world.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.entity;
      reader.readMessage(value,proto.entity.deserializeBinaryFromReader);
      msg.getEntsList().push(value);
      msg.setEntsList(msg.getEntsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.world} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.world.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.world.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.world.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEntsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.entity.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.world} The clone.
 */
proto.world.prototype.cloneMessage = function() {
  return /** @type {!proto.world} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated entity ents = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.entity>}
 */
proto.world.prototype.getEntsList = function() {
  return /** @type{!Array.<!proto.entity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.entity, 1));
};


/** @param {Array.<!proto.entity>} value  */
proto.world.prototype.setEntsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.world.prototype.clearEntsList = function() {
  this.setEntsList([]);
};


goog.object.extend(exports, proto);
