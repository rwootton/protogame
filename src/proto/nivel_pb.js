/*eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ClientMsgDto', null, global);
goog.exportSymbol('proto.EntityDto', null, global);
goog.exportSymbol('proto.EntityStatusListDto', null, global);
goog.exportSymbol('proto.ErrorDto', null, global);
goog.exportSymbol('proto.ErrorDto.ErrorCode', null, global);
goog.exportSymbol('proto.EventAnimateDto', null, global);
goog.exportSymbol('proto.EventDto', null, global);
goog.exportSymbol('proto.EventGaitDto', null, global);
goog.exportSymbol('proto.ServerMsgDto', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EntityDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EntityDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EntityDto.displayName = 'proto.EntityDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EntityDto.prototype.toObject = function(opt_includeInstance) {
  return proto.EntityDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EntityDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EntityDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    posx: +jspb.Message.getField(msg, 1),
    posy: +jspb.Message.getField(msg, 2),
    posz: +jspb.Message.getField(msg, 3),
    gid: jspb.Message.getField(msg, 4),
    collisionradius: +jspb.Message.getField(msg, 5),
    speed: +jspb.Message.getField(msg, 6),
    heading: +jspb.Message.getField(msg, 7),
    facing: +jspb.Message.getField(msg, 8),
    gait: +jspb.Message.getField(msg, 9),
    animationstart: jspb.Message.getField(msg, 10),
    animation: jspb.Message.getField(msg, 11),
    collisionmaska: jspb.Message.getField(msg, 12),
    collisionmaskb: jspb.Message.getField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EntityDto}
 */
proto.EntityDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EntityDto;
  return proto.EntityDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EntityDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EntityDto}
 */
proto.EntityDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPosx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPosy(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPosz(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCollisionradius(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFacing(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGait(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAnimationstart(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnimation(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCollisionmaska(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCollisionmaskb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EntityDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EntityDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EntityDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EntityDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = jspb.Message.getField(this, 6);
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = jspb.Message.getField(this, 7);
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = jspb.Message.getField(this, 8);
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = jspb.Message.getField(this, 9);
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = jspb.Message.getField(this, 10);
  if (f != null) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = jspb.Message.getField(this, 11);
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = jspb.Message.getField(this, 12);
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = jspb.Message.getField(this, 13);
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EntityDto} The clone.
 */
proto.EntityDto.prototype.cloneMessage = function() {
  return /** @type {!proto.EntityDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required double posX = 1;
 * @return {number}
 */
proto.EntityDto.prototype.getPosx = function() {
  return /** @type {number} */ (!this.hasPosx() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setPosx = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EntityDto.prototype.clearPosx = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasPosx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required double posY = 2;
 * @return {number}
 */
proto.EntityDto.prototype.getPosy = function() {
  return /** @type {number} */ (!this.hasPosy() ? 0.0 : +jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setPosy = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.EntityDto.prototype.clearPosy = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasPosy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required double posZ = 3;
 * @return {number}
 */
proto.EntityDto.prototype.getPosz = function() {
  return /** @type {number} */ (!this.hasPosz() ? 0.0 : +jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setPosz = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.EntityDto.prototype.clearPosz = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasPosz = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint64 gid = 4;
 * @return {number}
 */
proto.EntityDto.prototype.getGid = function() {
  return /** @type {number} */ (!this.hasGid() ? 0 : jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setGid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.EntityDto.prototype.clearGid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasGid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required double collisionRadius = 5;
 * @return {number}
 */
proto.EntityDto.prototype.getCollisionradius = function() {
  return /** @type {number} */ (!this.hasCollisionradius() ? 0.0 : +jspb.Message.getField(this, 5));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setCollisionradius = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.EntityDto.prototype.clearCollisionradius = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasCollisionradius = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required double speed = 6;
 * @return {number}
 */
proto.EntityDto.prototype.getSpeed = function() {
  return /** @type {number} */ (!this.hasSpeed() ? 0.0 : +jspb.Message.getField(this, 6));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.EntityDto.prototype.clearSpeed = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required double heading = 7;
 * @return {number}
 */
proto.EntityDto.prototype.getHeading = function() {
  return /** @type {number} */ (!this.hasHeading() ? 0.0 : +jspb.Message.getField(this, 7));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setHeading = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.EntityDto.prototype.clearHeading = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required double facing = 8;
 * @return {number}
 */
proto.EntityDto.prototype.getFacing = function() {
  return /** @type {number} */ (!this.hasFacing() ? 0.0 : +jspb.Message.getField(this, 8));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setFacing = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.EntityDto.prototype.clearFacing = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasFacing = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required double gait = 9;
 * @return {number}
 */
proto.EntityDto.prototype.getGait = function() {
  return /** @type {number} */ (!this.hasGait() ? 0.0 : +jspb.Message.getField(this, 9));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setGait = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.EntityDto.prototype.clearGait = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasGait = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required int64 animationStart = 10;
 * @return {number}
 */
proto.EntityDto.prototype.getAnimationstart = function() {
  return /** @type {number} */ (!this.hasAnimationstart() ? 0 : jspb.Message.getField(this, 10));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setAnimationstart = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.EntityDto.prototype.clearAnimationstart = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasAnimationstart = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required uint32 animation = 11;
 * @return {number}
 */
proto.EntityDto.prototype.getAnimation = function() {
  return /** @type {number} */ (!this.hasAnimation() ? 0 : jspb.Message.getField(this, 11));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setAnimation = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.EntityDto.prototype.clearAnimation = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasAnimation = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required uint32 collisionMaskA = 12;
 * @return {number}
 */
proto.EntityDto.prototype.getCollisionmaska = function() {
  return /** @type {number} */ (!this.hasCollisionmaska() ? 0 : jspb.Message.getField(this, 12));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setCollisionmaska = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.EntityDto.prototype.clearCollisionmaska = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasCollisionmaska = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required uint32 collisionMaskB = 13;
 * @return {number}
 */
proto.EntityDto.prototype.getCollisionmaskb = function() {
  return /** @type {number} */ (!this.hasCollisionmaskb() ? 0 : jspb.Message.getField(this, 13));
};


/** @param {number|undefined} value  */
proto.EntityDto.prototype.setCollisionmaskb = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.EntityDto.prototype.clearCollisionmaskb = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityDto.prototype.hasCollisionmaskb = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventGaitDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventGaitDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EventGaitDto.displayName = 'proto.EventGaitDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventGaitDto.prototype.toObject = function(opt_includeInstance) {
  return proto.EventGaitDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventGaitDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EventGaitDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    heading: +jspb.Message.getField(msg, 1),
    facing: +jspb.Message.getField(msg, 2),
    gait: +jspb.Message.getField(msg, 3),
    entityid: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventGaitDto}
 */
proto.EventGaitDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventGaitDto;
  return proto.EventGaitDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventGaitDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventGaitDto}
 */
proto.EventGaitDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFacing(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGait(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEntityid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EventGaitDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EventGaitDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventGaitDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EventGaitDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EventGaitDto} The clone.
 */
proto.EventGaitDto.prototype.cloneMessage = function() {
  return /** @type {!proto.EventGaitDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required double heading = 1;
 * @return {number}
 */
proto.EventGaitDto.prototype.getHeading = function() {
  return /** @type {number} */ (!this.hasHeading() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.EventGaitDto.prototype.setHeading = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EventGaitDto.prototype.clearHeading = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EventGaitDto.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required double facing = 2;
 * @return {number}
 */
proto.EventGaitDto.prototype.getFacing = function() {
  return /** @type {number} */ (!this.hasFacing() ? 0.0 : +jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.EventGaitDto.prototype.setFacing = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.EventGaitDto.prototype.clearFacing = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EventGaitDto.prototype.hasFacing = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required double gait = 3;
 * @return {number}
 */
proto.EventGaitDto.prototype.getGait = function() {
  return /** @type {number} */ (!this.hasGait() ? 0.0 : +jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.EventGaitDto.prototype.setGait = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.EventGaitDto.prototype.clearGait = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EventGaitDto.prototype.hasGait = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 entityId = 4;
 * @return {number}
 */
proto.EventGaitDto.prototype.getEntityid = function() {
  return /** @type {number} */ (!this.hasEntityid() ? 0 : jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.EventGaitDto.prototype.setEntityid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.EventGaitDto.prototype.clearEntityid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EventGaitDto.prototype.hasEntityid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventAnimateDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventAnimateDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EventAnimateDto.displayName = 'proto.EventAnimateDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventAnimateDto.prototype.toObject = function(opt_includeInstance) {
  return proto.EventAnimateDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventAnimateDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EventAnimateDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    animation: jspb.Message.getField(msg, 1),
    entityid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventAnimateDto}
 */
proto.EventAnimateDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventAnimateDto;
  return proto.EventAnimateDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventAnimateDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventAnimateDto}
 */
proto.EventAnimateDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnimation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEntityid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EventAnimateDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EventAnimateDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventAnimateDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EventAnimateDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EventAnimateDto} The clone.
 */
proto.EventAnimateDto.prototype.cloneMessage = function() {
  return /** @type {!proto.EventAnimateDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required uint32 animation = 1;
 * @return {number}
 */
proto.EventAnimateDto.prototype.getAnimation = function() {
  return /** @type {number} */ (!this.hasAnimation() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.EventAnimateDto.prototype.setAnimation = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EventAnimateDto.prototype.clearAnimation = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EventAnimateDto.prototype.hasAnimation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 entityId = 2;
 * @return {number}
 */
proto.EventAnimateDto.prototype.getEntityid = function() {
  return /** @type {number} */ (!this.hasEntityid() ? 0 : jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.EventAnimateDto.prototype.setEntityid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.EventAnimateDto.prototype.clearEntityid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EventAnimateDto.prototype.hasEntityid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.EventDto.oneofGroups_);
};
goog.inherits(proto.EventDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EventDto.displayName = 'proto.EventDto';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.EventDto.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.EventDto.EventCase = {
  EVENT_NOT_SET: 0,
  GAIT: 2,
  SPAWN: 3,
  ANIMATE: 4
};

/**
 * @return {proto.EventDto.EventCase}
 */
proto.EventDto.prototype.getEventCase = function() {
  return /** @type {proto.EventDto.EventCase} */(jspb.Message.computeOneofCase(this, proto.EventDto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventDto.prototype.toObject = function(opt_includeInstance) {
  return proto.EventDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EventDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    tick: jspb.Message.getField(msg, 1),
    gait: (f = msg.getGait()) && proto.EventGaitDto.toObject(includeInstance, f),
    spawn: (f = msg.getSpawn()) && proto.EntityDto.toObject(includeInstance, f),
    animate: (f = msg.getAnimate()) && proto.EventAnimateDto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventDto}
 */
proto.EventDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventDto;
  return proto.EventDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventDto}
 */
proto.EventDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTick(value);
      break;
    case 2:
      var value = new proto.EventGaitDto;
      reader.readMessage(value,proto.EventGaitDto.deserializeBinaryFromReader);
      msg.setGait(value);
      break;
    case 3:
      var value = new proto.EntityDto;
      reader.readMessage(value,proto.EntityDto.deserializeBinaryFromReader);
      msg.setSpawn(value);
      break;
    case 4:
      var value = new proto.EventAnimateDto;
      reader.readMessage(value,proto.EventAnimateDto.deserializeBinaryFromReader);
      msg.setAnimate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EventDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EventDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EventDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getGait();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.EventGaitDto.serializeBinaryToWriter
    );
  }
  f = this.getSpawn();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EntityDto.serializeBinaryToWriter
    );
  }
  f = this.getAnimate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.EventAnimateDto.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EventDto} The clone.
 */
proto.EventDto.prototype.cloneMessage = function() {
  return /** @type {!proto.EventDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int64 tick = 1;
 * @return {number}
 */
proto.EventDto.prototype.getTick = function() {
  return /** @type {number} */ (!this.hasTick() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.EventDto.prototype.setTick = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EventDto.prototype.clearTick = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EventDto.prototype.hasTick = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventGaitDto gait = 2;
 * @return {proto.EventGaitDto}
 */
proto.EventDto.prototype.getGait = function() {
  return /** @type{proto.EventGaitDto} */ (
    jspb.Message.getWrapperField(this, proto.EventGaitDto, 2));
};


/** @param {proto.EventGaitDto|undefined} value  */
proto.EventDto.prototype.setGait = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.EventDto.oneofGroups_[0], value);
};


proto.EventDto.prototype.clearGait = function() {
  this.setGait(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EventDto.prototype.hasGait = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EntityDto spawn = 3;
 * @return {proto.EntityDto}
 */
proto.EventDto.prototype.getSpawn = function() {
  return /** @type{proto.EntityDto} */ (
    jspb.Message.getWrapperField(this, proto.EntityDto, 3));
};


/** @param {proto.EntityDto|undefined} value  */
proto.EventDto.prototype.setSpawn = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.EventDto.oneofGroups_[0], value);
};


proto.EventDto.prototype.clearSpawn = function() {
  this.setSpawn(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EventDto.prototype.hasSpawn = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventAnimateDto animate = 4;
 * @return {proto.EventAnimateDto}
 */
proto.EventDto.prototype.getAnimate = function() {
  return /** @type{proto.EventAnimateDto} */ (
    jspb.Message.getWrapperField(this, proto.EventAnimateDto, 4));
};


/** @param {proto.EventAnimateDto|undefined} value  */
proto.EventDto.prototype.setAnimate = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.EventDto.oneofGroups_[0], value);
};


proto.EventDto.prototype.clearAnimate = function() {
  this.setAnimate(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EventDto.prototype.hasAnimate = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EntityStatusListDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EntityStatusListDto.repeatedFields_, null);
};
goog.inherits(proto.EntityStatusListDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EntityStatusListDto.displayName = 'proto.EntityStatusListDto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EntityStatusListDto.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EntityStatusListDto.prototype.toObject = function(opt_includeInstance) {
  return proto.EntityStatusListDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EntityStatusListDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EntityStatusListDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    tick: jspb.Message.getField(msg, 1),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.EntityDto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EntityStatusListDto}
 */
proto.EntityStatusListDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EntityStatusListDto;
  return proto.EntityStatusListDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EntityStatusListDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EntityStatusListDto}
 */
proto.EntityStatusListDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTick(value);
      break;
    case 2:
      var value = new proto.EntityDto;
      reader.readMessage(value,proto.EntityDto.deserializeBinaryFromReader);
      msg.getEntitiesList().push(value);
      msg.setEntitiesList(msg.getEntitiesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.EntityStatusListDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EntityStatusListDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EntityStatusListDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.EntityStatusListDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.EntityDto.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.EntityStatusListDto} The clone.
 */
proto.EntityStatusListDto.prototype.cloneMessage = function() {
  return /** @type {!proto.EntityStatusListDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int64 tick = 1;
 * @return {number}
 */
proto.EntityStatusListDto.prototype.getTick = function() {
  return /** @type {number} */ (!this.hasTick() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.EntityStatusListDto.prototype.setTick = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.EntityStatusListDto.prototype.clearTick = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.EntityStatusListDto.prototype.hasTick = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated EntityDto entities = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.EntityDto>}
 */
proto.EntityStatusListDto.prototype.getEntitiesList = function() {
  return /** @type{!Array.<!proto.EntityDto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EntityDto, 2));
};


/** @param {Array.<!proto.EntityDto>} value  */
proto.EntityStatusListDto.prototype.setEntitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.EntityStatusListDto.prototype.clearEntitiesList = function() {
  this.setEntitiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ErrorDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ErrorDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ErrorDto.displayName = 'proto.ErrorDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ErrorDto.prototype.toObject = function(opt_includeInstance) {
  return proto.ErrorDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ErrorDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ErrorDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ErrorDto}
 */
proto.ErrorDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ErrorDto;
  return proto.ErrorDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ErrorDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ErrorDto}
 */
proto.ErrorDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ErrorDto.ErrorCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ErrorDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ErrorDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ErrorDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ErrorDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ErrorDto} The clone.
 */
proto.ErrorDto.prototype.cloneMessage = function() {
  return /** @type {!proto.ErrorDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * required ErrorCode code = 1;
 * @return {!proto.ErrorDto.ErrorCode}
 */
proto.ErrorDto.prototype.getCode = function() {
  return /** @type {!proto.ErrorDto.ErrorCode} */ (!this.hasCode() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {proto.ErrorDto.ErrorCode|undefined} value  */
proto.ErrorDto.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ErrorDto.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ErrorDto.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.ErrorDto.ErrorCode = {
  SERVER_ERROR: 0,
  TOO_MANY_CONNECTIONS: 1,
  SERVER_MAINTENANCE: 2,
  MESSAGE_TOO_LONG: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMsgDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ServerMsgDto.oneofGroups_);
};
goog.inherits(proto.ServerMsgDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServerMsgDto.displayName = 'proto.ServerMsgDto';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServerMsgDto.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.ServerMsgDto.MsgCase = {
  MSG_NOT_SET: 0,
  ERROR: 1,
  ENTITYLIST: 2,
  EVENT: 3
};

/**
 * @return {proto.ServerMsgDto.MsgCase}
 */
proto.ServerMsgDto.prototype.getMsgCase = function() {
  return /** @type {proto.ServerMsgDto.MsgCase} */(jspb.Message.computeOneofCase(this, proto.ServerMsgDto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMsgDto.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMsgDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMsgDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ServerMsgDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.ErrorDto.toObject(includeInstance, f),
    entitylist: (f = msg.getEntitylist()) && proto.EntityStatusListDto.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && proto.EventDto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMsgDto}
 */
proto.ServerMsgDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMsgDto;
  return proto.ServerMsgDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMsgDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMsgDto}
 */
proto.ServerMsgDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ErrorDto;
      reader.readMessage(value,proto.ErrorDto.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.EntityStatusListDto;
      reader.readMessage(value,proto.EntityStatusListDto.deserializeBinaryFromReader);
      msg.setEntitylist(value);
      break;
    case 3:
      var value = new proto.EventDto;
      reader.readMessage(value,proto.EventDto.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ServerMsgDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ServerMsgDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMsgDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ServerMsgDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ErrorDto.serializeBinaryToWriter
    );
  }
  f = this.getEntitylist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.EntityStatusListDto.serializeBinaryToWriter
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EventDto.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ServerMsgDto} The clone.
 */
proto.ServerMsgDto.prototype.cloneMessage = function() {
  return /** @type {!proto.ServerMsgDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ErrorDto error = 1;
 * @return {proto.ErrorDto}
 */
proto.ServerMsgDto.prototype.getError = function() {
  return /** @type{proto.ErrorDto} */ (
    jspb.Message.getWrapperField(this, proto.ErrorDto, 1));
};


/** @param {proto.ErrorDto|undefined} value  */
proto.ServerMsgDto.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ServerMsgDto.oneofGroups_[0], value);
};


proto.ServerMsgDto.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ServerMsgDto.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EntityStatusListDto entityList = 2;
 * @return {proto.EntityStatusListDto}
 */
proto.ServerMsgDto.prototype.getEntitylist = function() {
  return /** @type{proto.EntityStatusListDto} */ (
    jspb.Message.getWrapperField(this, proto.EntityStatusListDto, 2));
};


/** @param {proto.EntityStatusListDto|undefined} value  */
proto.ServerMsgDto.prototype.setEntitylist = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ServerMsgDto.oneofGroups_[0], value);
};


proto.ServerMsgDto.prototype.clearEntitylist = function() {
  this.setEntitylist(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ServerMsgDto.prototype.hasEntitylist = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EventDto event = 3;
 * @return {proto.EventDto}
 */
proto.ServerMsgDto.prototype.getEvent = function() {
  return /** @type{proto.EventDto} */ (
    jspb.Message.getWrapperField(this, proto.EventDto, 3));
};


/** @param {proto.EventDto|undefined} value  */
proto.ServerMsgDto.prototype.setEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ServerMsgDto.oneofGroups_[0], value);
};


proto.ServerMsgDto.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ServerMsgDto.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientMsgDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ClientMsgDto.oneofGroups_);
};
goog.inherits(proto.ClientMsgDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientMsgDto.displayName = 'proto.ClientMsgDto';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ClientMsgDto.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.ClientMsgDto.MsgCase = {
  MSG_NOT_SET: 0,
  EVENT: 1
};

/**
 * @return {proto.ClientMsgDto.MsgCase}
 */
proto.ClientMsgDto.prototype.getMsgCase = function() {
  return /** @type {proto.ClientMsgDto.MsgCase} */(jspb.Message.computeOneofCase(this, proto.ClientMsgDto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientMsgDto.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientMsgDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientMsgDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ClientMsgDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.EventDto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientMsgDto}
 */
proto.ClientMsgDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientMsgDto;
  return proto.ClientMsgDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientMsgDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientMsgDto}
 */
proto.ClientMsgDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EventDto;
      reader.readMessage(value,proto.EventDto.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ClientMsgDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ClientMsgDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientMsgDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ClientMsgDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.EventDto.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ClientMsgDto} The clone.
 */
proto.ClientMsgDto.prototype.cloneMessage = function() {
  return /** @type {!proto.ClientMsgDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional EventDto event = 1;
 * @return {proto.EventDto}
 */
proto.ClientMsgDto.prototype.getEvent = function() {
  return /** @type{proto.EventDto} */ (
    jspb.Message.getWrapperField(this, proto.EventDto, 1));
};


/** @param {proto.EventDto|undefined} value  */
proto.ClientMsgDto.prototype.setEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ClientMsgDto.oneofGroups_[0], value);
};


proto.ClientMsgDto.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ClientMsgDto.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto);
